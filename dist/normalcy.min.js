!function(e,n){"object"==typeof exports&&"object"==typeof module?module.exports=n():"function"==typeof define&&define.amd?define([],n):"object"==typeof exports?exports.normalcy=n():e.normalcy=n()}(self,(function(){return(()=>{"use strict";var e={d:(n,t)=>{for(var r in t)e.o(t,r)&&!e.o(n,r)&&Object.defineProperty(n,r,{enumerable:!0,get:t[r]})},o:(e,n)=>Object.prototype.hasOwnProperty.call(e,n),r:e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})}},n={};e.r(n),e.d(n,{add:()=>s,compose:()=>a,default:()=>u,merge:()=>f,remove:()=>d,schema:()=>o});const t=Array.isArray.bind(Array);class r{constructor(e,n){this.name=e,this.id=n}is(e){return e===this.name}getId(e,n){return n?e?.[n]:"function"==typeof this.id?this.id(e):e?.[this.id]}keyById(e,n){if(n){const{[n]:t,...r}=e;return{[e[n]]:{[this.id]:t,...r}}}return{[this.getId(e)]:e}}replaceWithId(e){return this.getId(e)??e}normalize(e,n){return t(e)?this.normalizeAll(e,n):this.normalizeOne(e,n)}normalizeOne(e,n){return this.keyById(e,n)}normalizeAll(e,n){return e.reduce(((e,t)=>({...e,...this.normalizeOne(t,n)})),{})}reduceEntities(e,n,...t){return e.reduce(((e,r)=>({...e,...n(r,...t)})),{})}normalizeDisambiguation(e,n){return"function"==typeof n&&(n=n(e)),"string"==typeof n?n.split("."):Array.isArray(n)?[...n]:[]}findAndAdd(e,...n){return this[t(e)?"findAndAddAll":"findAndAddOne"](e,...n)}findAndAddOne(e,n,i,o,s,d){d=this.normalizeDisambiguation(e,d);const f=(e,n,o)=>{for(let[a,u]of Object.entries(n)){if(d.length){if(d[0]!==a)continue;d.shift()}if(u instanceof r&&u.is(i.name))return{...e,[a]:u.getId(o,s)};if(t(u)&&u[0]instanceof r&&u[0].is(i.name))return e[a]?{...e,[a]:[...e[a],u[0].getId(o,s)]}:{...e,[a]:[u[0].getId(o,s)]};if(null!==u&&"object"==typeof u)return{...e,[a]:f(e[a],u,o)}}},a="function"==typeof o?o(e):e[o];return{...n,[a]:f(n[a],this.shape,e)}}findAndAddAll(e,...n){return this.reduceEntities(e,this.findAndAddOne.bind(this),...n)}remove(e,n,r){return this[t(n)?"removeAll":"removeOne"](e,n,r)}removeOne(e,n,t){const{[this.getId(n,t)]:r,...i}=e;return{...i}}removeAll(e,n,t){return n.reduce(((e,n)=>this.removeOne(e,n,t)),e)}findAndRemove(e,...n){return this[t(e)?"findAndRemoveAll":"findAndRemoveOne"](e,...n)}findAndRemoveOne(e,n,i,o,s,d){d=this.normalizeDisambiguation(e,d);const f=(e,n,o)=>{for(let[a,u]of Object.entries(n)){if(d.length){if(d[0]!==a)continue;d.shift()}if(u instanceof r&&u.is(i.name)&&e[a]===u.getId(o,s)){const{[a]:n,...t}=e;return{...t}}if(t(u)&&t(e[a])&&u[0]instanceof r&&u[0].is(i.name)){const n=u[0].getId(o,s);return{...e,[a]:e[a].filter((e=>e!==n))}}return null!==u&&"object"==typeof u?{...e,[a]:f(e[a],u,o)}:e}},a="function"==typeof o?o(e):e[o];return{...n,[a]:f(n[a],this.shape,e)}}findAndRemoveAll(e,...n){return this.reduceEntities(e,this.findAndRemoveOne.bind(this),...n)}merge(e,n){return t(n)?this.mergeAll(e,n):this.mergeOne(e,n)}mergeOne(e,n){const t=this.getId(n);return{...e,[t]:{...e[t],...n}}}mergeAll(e,n){return n.reduce(((n,t)=>({...n,...this.mergeOne(e,t)})),{})}}class i extends r{constructor(e,n,t){super(e,n),this.shape=t}normalizeOne(e){return{[this.getId(e)]:this.walkShape(this.shape,e)}}walkShape(e,n){return{...n,...Object.entries(e).reduce(((e,[t,i])=>{const o=n[t];let s;return s=i instanceof r?i.replaceWithId(o):Array.isArray(i)&&Array.isArray(o)?i[0]instanceof r?o.map((e=>i[0].replaceWithId(e))):o.map((e=>this.walkShape(i[0],e))):this.walkShape(i,n[t]),{...e,[t]:s}}),{})}}findAndNorm(e,n){return Array.isArray(n)?this.findAndNormAll(e,n):this.findAndNormOne(e,n)}findAndNormOne(e,n){const t=(n,i)=>{for(let[o,s]of Object.entries(n)){if(s instanceof r){if(s.is(e.name)&&i[o])return s.normalize(i[o]);if(i[o])return t(s.shape,i[o])}if(null!==s&&"object"==typeof s)return t(s,i[o])}};return t(this.shape,n)}findAndNormAll(e,n){return n.reduce(((n,t)=>({...n,...this.findAndNormOne(e,t)})),{})}}const o=(e,n,t)=>("string"!=typeof n&&"function"!=typeof n||(t=n,n=null),t||="id",n?new i(e,t,n):new r(e,t)),s=(e,n)=>{const t=(t,r)=>({...t,...e.normalize(r,n)});return t.from=n=>(t,r)=>({...t,...n.findAndNorm(e,r)}),t.to=(t,r,i)=>(o,s)=>({...o,...t.findAndAdd(s,o,e,r,n,i)}),t},d=(e,n)=>{const t=(t,r)=>e.remove(t,r,n);return t.from=(t,r,i)=>(o,s)=>t.findAndRemove(s,o,e,r,n,i),t},f=e=>(n,t)=>e.merge(n,t),a=(...e)=>(n,t)=>e.reduce(((e,n)=>n(e,t)),n),u={schema:o,add:s};return n})()}));